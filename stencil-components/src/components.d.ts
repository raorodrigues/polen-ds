/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface PolButton {
        /**
          * Define se o botão ocupa 100 da largura do bloco
         */
        "block": boolean;
        "class": string;
        /**
          * Define se o botão fica desabilitado
         */
        "disabled": boolean;
        /**
          * Define uma URL para o botão. No caso será impressa uma tag 'a'
         */
        "href": string;
        "pill": boolean;
        /**
          * Tamanho do botão. Pode ser 'sm' | 'md' | 'lg' Padrão: 'lg'
         */
        "size": 'sm' | 'md' | 'lg';
        "text": string;
        "type": 'button' | 'menu' | 'reset' | 'submit';
        /**
          * Variação de cores do botão. Pode ser 'primary' | 'secondary' | 'outline-light' | 'outline-dark' Padrão: 'primary'
         */
        "variation": 'primary' | 'secondary' | 'outline-light' | 'outline-dark';
    }
    interface PolInput {
        "class": string;
        /**
          * Define se o input fica desabilitado
         */
        "disabled": boolean;
        /**
          * Label do input - Obrigatório
         */
        "label": string;
        "name": string;
        /**
          * Placeholder do input
         */
        "placeholder": string;
        /**
          * Define se o input fica somente leitura
         */
        "readonly": boolean;
        /**
          * Devine se o input é obrigatório
         */
        "required": boolean;
        /**
          * Valor do input
         */
        "value": string;
    }
    interface PolSelect {
        "class": string;
        /**
          * Define se o input fica desabilitado
         */
        "disabled": boolean;
        /**
          * Label do input - Obrigatório
         */
        "label": string;
        /**
          * Define se o input fica somente leitura
         */
        "readonly": boolean;
        /**
          * Devine se o input é obrigatório
         */
        "required": boolean;
        /**
          * Valor do input
         */
        "value": string;
    }
}
declare global {
    interface HTMLPolButtonElement extends Components.PolButton, HTMLStencilElement {
    }
    var HTMLPolButtonElement: {
        prototype: HTMLPolButtonElement;
        new (): HTMLPolButtonElement;
    };
    interface HTMLPolInputElement extends Components.PolInput, HTMLStencilElement {
    }
    var HTMLPolInputElement: {
        prototype: HTMLPolInputElement;
        new (): HTMLPolInputElement;
    };
    interface HTMLPolSelectElement extends Components.PolSelect, HTMLStencilElement {
    }
    var HTMLPolSelectElement: {
        prototype: HTMLPolSelectElement;
        new (): HTMLPolSelectElement;
    };
    interface HTMLElementTagNameMap {
        "pol-button": HTMLPolButtonElement;
        "pol-input": HTMLPolInputElement;
        "pol-select": HTMLPolSelectElement;
    }
}
declare namespace LocalJSX {
    interface PolButton {
        /**
          * Define se o botão ocupa 100 da largura do bloco
         */
        "block"?: boolean;
        "class"?: string;
        /**
          * Define se o botão fica desabilitado
         */
        "disabled"?: boolean;
        /**
          * Define uma URL para o botão. No caso será impressa uma tag 'a'
         */
        "href"?: string;
        "pill"?: boolean;
        /**
          * Tamanho do botão. Pode ser 'sm' | 'md' | 'lg' Padrão: 'lg'
         */
        "size"?: 'sm' | 'md' | 'lg';
        "text"?: string;
        "type"?: 'button' | 'menu' | 'reset' | 'submit';
        /**
          * Variação de cores do botão. Pode ser 'primary' | 'secondary' | 'outline-light' | 'outline-dark' Padrão: 'primary'
         */
        "variation"?: 'primary' | 'secondary' | 'outline-light' | 'outline-dark';
    }
    interface PolInput {
        "class"?: string;
        /**
          * Define se o input fica desabilitado
         */
        "disabled"?: boolean;
        /**
          * Label do input - Obrigatório
         */
        "label"?: string;
        "name"?: string;
        "onChanged"?: (event: CustomEvent<string>) => void;
        /**
          * Placeholder do input
         */
        "placeholder"?: string;
        /**
          * Define se o input fica somente leitura
         */
        "readonly"?: boolean;
        /**
          * Devine se o input é obrigatório
         */
        "required"?: boolean;
        /**
          * Valor do input
         */
        "value"?: string;
    }
    interface PolSelect {
        "class"?: string;
        /**
          * Define se o input fica desabilitado
         */
        "disabled"?: boolean;
        /**
          * Label do input - Obrigatório
         */
        "label"?: string;
        "onChanged"?: (event: CustomEvent<string>) => void;
        /**
          * Define se o input fica somente leitura
         */
        "readonly"?: boolean;
        /**
          * Devine se o input é obrigatório
         */
        "required"?: boolean;
        /**
          * Valor do input
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "pol-button": PolButton;
        "pol-input": PolInput;
        "pol-select": PolSelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pol-button": LocalJSX.PolButton & JSXBase.HTMLAttributes<HTMLPolButtonElement>;
            "pol-input": LocalJSX.PolInput & JSXBase.HTMLAttributes<HTMLPolInputElement>;
            "pol-select": LocalJSX.PolSelect & JSXBase.HTMLAttributes<HTMLPolSelectElement>;
        }
    }
}
